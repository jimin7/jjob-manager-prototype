{"version":3,"sources":["logo.svg","components/WorkbenchTop.js","components/Layout.js","components/MenuTree.js","components/MapEditor.js","components/WorkbenchBody.js","components/Workbench.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WorkbenchTop","loginUser","login","logout","align","Alignment","LEFT","RIGHT","className","Classes","MINIMAL","icon","onClick","Layout","name","children","INITIAL_STATE","id","hasCaret","label","isExpanded","content","position","Position","childNodes","secondaryLabel","intent","Intent","PRIMARY","TREE_NODE_ICON","MenuTree","setSelectedItem","selectedItem","useState","nodes","setNodes","handleNodeSelected","nodeData","nodePath","e","forEachNode","map","node","isSelected","handleNodeCollapse","handleNodeExpand","contents","onNodeClick","onNodeExpand","onNodeCollapse","MapEditor","WorkbenchBody","TITLE_MAP","navigator","body","editor","renderTile","path","draggable","title","initialValue","direction","first","second","splitPercentage","Workbench","setLoginUser","console","log","userName","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09ef4fce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport {Button, Classes, Icon, Navbar, NavbarGroup, NavbarHeading, Alignment, NavbarDivider} from \"@blueprintjs/core\";\r\n\r\nfunction WorkbenchTop({ loginUser, login, logout }) {\r\n  return (\r\n      <>\r\n          <Navbar>\r\n              <NavbarGroup align={Alignment.LEFT}>\r\n                  <NavbarHeading>J-Jobs</NavbarHeading>\r\n              </NavbarGroup>\r\n              <NavbarGroup align={Alignment.RIGHT}>\r\n                  {loginUser === null ? (\r\n                      <Button\r\n                          className={Classes.MINIMAL}\r\n                          icon={\"log-in\"}\r\n                          onClick={() => login(\"jimin\")}\r\n                      />\r\n                  ) : (\r\n                      <Button className={Classes.MINIMAL} icon={\"log-out\"} onClick={logout}/>\r\n                  )}\r\n              </NavbarGroup>\r\n          </Navbar>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default WorkbenchTop;\r\n","import React from \"react\";\r\n\r\nfunction Layout({ name, children }) {\r\n  return <>{children}</>;\r\n}\r\n\r\nexport default Layout;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Tree,\r\n  Tooltip,\r\n  Icon,\r\n  Position,\r\n  Intent,\r\n  Classes,\r\n} from \"@blueprintjs/core\";\r\n\r\nconst INITIAL_STATE = [\r\n  {\r\n    id: 0,\r\n    hasCaret: true,\r\n    icon: \"folder-close\",\r\n    label: \"Folder 0\",\r\n  },\r\n  {\r\n    id: 1,\r\n    icon: \"folder-close\",\r\n    isExpanded: true,\r\n    label: (\r\n      <Tooltip content=\"I'm a folder <3\" position={Position.RIGHT}>\r\n        Folder 1\r\n      </Tooltip>\r\n    ),\r\n    childNodes: [\r\n      {\r\n        id: 2,\r\n        icon: \"document\",\r\n        label: \"Item 0\",\r\n        secondaryLabel: (\r\n          <Tooltip content=\"An eye!\">\r\n            <Icon icon=\"eye-open\" />\r\n          </Tooltip>\r\n        ),\r\n      },\r\n      {\r\n        id: 3,\r\n        icon: (\r\n          <Icon\r\n            icon=\"tag\"\r\n            intent={Intent.PRIMARY}\r\n            className={Classes.TREE_NODE_ICON}\r\n          />\r\n        ),\r\n        label:\r\n          \"Organic meditation gluten-free, sriracha VHS drinking vinegar beard man.\",\r\n      },\r\n      {\r\n        id: 4,\r\n        hasCaret: true,\r\n        icon: \"folder-close\",\r\n        label: (\r\n          <Tooltip content=\"foo\" position={Position.RIGHT}>\r\n            Folder 2\r\n          </Tooltip>\r\n        ),\r\n        childNodes: [\r\n          { id: 5, label: \"No-Icon Item\" },\r\n          { id: 6, icon: \"tag\", label: \"Item 1\" },\r\n          {\r\n            id: 7,\r\n            hasCaret: true,\r\n            icon: \"folder-close\",\r\n            label: \"Folder 3\",\r\n            childNodes: [\r\n              { id: 8, icon: \"document\", label: \"Item 0\" },\r\n              { id: 9, icon: \"tag\", label: \"Item 1\" },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: 10,\r\n    hasCaret: true,\r\n    icon: \"folder-close\",\r\n    label: \"Super secret files\",\r\n  },\r\n];\r\n\r\nfunction MenuTree({ loginUser, selectedItem, setSelectedItem }) {\r\n  const [nodes, setNodes] = useState(INITIAL_STATE);\r\n\r\n  function handleNodeSelected(nodeData, nodePath, e) {\r\n    setSelectedItem(nodeData.id);\r\n    setNodes(forEachNode(nodes, nodeData.id));\r\n  }\r\n\r\n  function forEachNode(children, id) {\r\n    if (children === null) return;\r\n\r\n    return children.map((node) => {\r\n      if (node.childNodes) {\r\n        node.childNodes = forEachNode(node.childNodes, id);\r\n      }\r\n      return node.id === id\r\n        ? { ...node, isSelected: true }\r\n        : { ...node, isSelected: false };\r\n    });\r\n  }\r\n\r\n  function handleNodeCollapse(nodeData) {\r\n    setNodes(\r\n      nodes.map((node) =>\r\n        node.id === nodeData.id ? { ...node, isExpanded: false } : node\r\n      )\r\n    );\r\n  }\r\n  function handleNodeExpand(nodeData) {\r\n    setNodes(\r\n      nodes.map((node) =>\r\n        node.id === nodeData.id ? { ...node, isExpanded: true } : node\r\n      )\r\n    );\r\n  }\r\n\r\n  // setTimeout(() => {\r\n  //   setNodes(INITIAL_STATE);\r\n  // }, 3000);\r\n\r\n  return (\r\n    <>\r\n      {loginUser ? (\r\n        <Tree\r\n          contents={nodes}\r\n          onNodeClick={handleNodeSelected}\r\n          onNodeExpand={handleNodeExpand}\r\n          onNodeCollapse={handleNodeCollapse}\r\n        />\r\n      ) : (\r\n        <Tree\r\n          contents={[]}\r\n          onNodeClick={handleNodeSelected}\r\n          onNodeExpand={handleNodeExpand}\r\n          onNodeCollapse={handleNodeCollapse}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MenuTree;\r\n","import React from \"react\";\r\n\r\nfunction MapEditor({ selectedItem }) {\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1>{selectedItem}</h1>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MapEditor;\r\n","import React from \"react\";\r\nimport Layout from \"./Layout\";\r\nimport MenuTree from \"./MenuTree\";\r\n\r\nimport { Mosaic, MosaicWindow } from \"react-mosaic-component\";\r\nimport MapEditor from \"./MapEditor\";\r\n\r\nfunction WorkbenchBody({ loginUser, selectedItem, setSelectedItem }) {\r\n  //   const TITLE_MAP = {\r\n  //     navigator: {\r\n  //       name: \"Navigator\",\r\n  //       body: (\r\n  //         <Layout name={\"navigator\"}>\r\n  //           <MenuTree loginUser={loginUser} />\r\n  //         </Layout>\r\n  //       ),\r\n  //     },\r\n  //     editor: { name: \"Editor\", body: <Layout name={\"editor\"}></Layout> },\r\n  //     property: { name: \"Property\", body: <Layout name={\"property\"}></Layout> },\r\n  //     view: { name: \"View\", body: <Layout name={\"view\"}></Layout> },\r\n  //   };\r\n  const TITLE_MAP = {\r\n    navigator: {\r\n      name: \"Navigator\",\r\n      body: (\r\n        <Layout name={\"navigator\"}>\r\n          <MenuTree\r\n            loginUser={loginUser}\r\n            selectedItem={selectedItem}\r\n            setSelectedItem={setSelectedItem}\r\n          />\r\n        </Layout>\r\n      ),\r\n    },\r\n    editor: {\r\n      name: \"Editor\",\r\n      body: (\r\n        <Layout name={\"editor\"}>\r\n          <MapEditor selectedItem={selectedItem} />\r\n        </Layout>\r\n      ),\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Mosaic\r\n      renderTile={(id, path) => (\r\n        <MosaicWindow path={path} draggable={false} title={TITLE_MAP[id].name}>\r\n          {TITLE_MAP[id].body}\r\n        </MosaicWindow>\r\n      )}\r\n      initialValue={{\r\n        direction: \"row\",\r\n        first: \"navigator\",\r\n        second: \"editor\",\r\n        splitPercentage: 30,\r\n      }}\r\n    />\r\n    // <div>\r\n    //   <Layout name={\"navigator\"}>\r\n    //     <MenuTree loginUser={loginUser} />\r\n    //   </Layout>\r\n    //   <Layout name={\"editor\"}></Layout>\r\n    //   <Layout name={\"property\"}></Layout>\r\n    //   <Layout name={\"view\"}></Layout>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default WorkbenchBody;\r\n","import React, { useState } from \"react\";\r\nimport WorkbenchTop from \"./WorkbenchTop\";\r\nimport WorkbenchBody from \"./WorkbenchBody\";\r\n\r\nimport { Mosaic } from \"react-mosaic-component\";\r\n\r\nfunction Workbench() {\r\n  const [loginUser, setLoginUser] = useState(\"jimin\");\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n  function logout() {\r\n    setLoginUser(null);\r\n  }\r\n\r\n  function login(userName) {\r\n    setLoginUser(userName);\r\n    alert(`${userName}이 로그인되었습니다.`);\r\n  }\r\n\r\n  console.log(\"loginUser : \" + loginUser);\r\n  return (\r\n    <>\r\n      <WorkbenchTop loginUser={loginUser} login={login} logout={logout} />\r\n      <WorkbenchBody\r\n        loginUser={loginUser}\r\n        selectedItem={selectedItem}\r\n        setSelectedItem={setSelectedItem}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Workbench;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Workbench from \"./components/Workbench\";\n\nimport \"react-mosaic-component/react-mosaic-component.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\nfunction App() {\n  return <Workbench />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}